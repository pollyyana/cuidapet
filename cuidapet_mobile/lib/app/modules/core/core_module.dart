import 'package:cuidapet/app/core/local_storage/flutter_secure_storage/flutter_secure_storage_local_storage_impl.dart';
import 'package:cuidapet/app/core/local_storage/local_storage.dart';
import 'package:cuidapet/app/core/local_storage/shared_preferences/shared_preferences_local_storage_impl.dart';
import 'package:cuidapet/app/core/logger/app_logger.dart';
import 'package:cuidapet/app/core/logger/app_logger_impl.dart';
import 'package:cuidapet/app/core/rest_client/dio/dio_rest_client.dart';
import 'package:cuidapet/app/core/rest_client/rest_client.dart';

import 'package:cuidapet/app/modules/core/auth/auth_store.dart';
import 'package:flutter_modular/flutter_modular.dart';


class CoreModule extends Module {
  @override
  void exportedBinds(Injector i) {
    // Chama primeiro se quiser manter
    super.exportedBinds(i);

    i.addLazySingleton<AppLogger>(AppLoggerImpl.new);
    i.addLazySingleton<AuthStore>(AuthStore.new);
    i.addLazySingleton<RestClient>(DioRestClient.new);
    i.addLazySingleton<LocalStorage>(SharedPreferencesLocalStorageImp.new);
    i.addLazySingleton<LocalSecureStorage>(FlutterSecureStorageLocalStorageImpl.new);
  }
}







//utilizado por mais de um ponto do sistema(alicerce)
//modulo apenas de import de bindings

/*
Esse m칠todo est치 adicionando o AuthStore como um Singleton.
Isso significa que haver치 apenas uma inst칙ncia de AuthStore em toda a aplica칞칚o.
Quando for necess치rio acessar AuthStore, o Modular vai fornecer sempre a mesma inst칙ncia.
*/

/*

Qual a diferen칞a?
游댳 addSingleton<AuthStore>(AuthStore.new);
Cria a inst칙ncia imediatamente quando o m칩dulo 칠 carregado.
A inst칙ncia existe na mem칩ria o tempo todo, mesmo que ningu칠m esteja usando.

游댳 addLazySingleton<AuthStore>(AuthStore.new);

S칩 cria a inst칙ncia quando for usada pela primeira vez.
Economiza mem칩ria, pois s칩 carrega quando necess치rio.
*/

